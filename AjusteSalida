#include <Adafruit_MCP4725.h>//dac
#include <Adafruit_MCP342X.h>//adc
#include <Wire.h>
#include <math.h>
#define BITS_USED_MASK  B00000011
#define Pow2(val) val*val
#define Pow3(val) val*val*val
#define ToCelcius(Tk) Tk - 273.15

const int eventoCamara = 2;

const float V_ref = 4.69; //Tensión de referencia

const int AjusteOK = 0; //salida de los DAC no ajustada
//si se ajusta cambiar valor a 1

const int TipoFoco = 0; //0 -->marca1
                        //1 -->marca2
                        
const float Pendiente1 = 0.000723; //pendiente
const float tempValues[] = {-40, 25, 110, 125, 130}; //valores de temp
const float Consigna[] = {0.883, 0.93, 0.837, 0.6975, 0.465}; //valores de corriente 95%,100%,90%,75%,50%

const float Pendiente2 = -0.016;
const float Temperaturas2[] = {112, 131};
const float Corrientes2[] = {0.95, 0.665};

//VALORES DE LAS CONSTANTES PARA marca1, SI CAMBIA EL MODELO DE FOCO MIRAR CUÁLES SERÍAN ESTOS VALORES
// NTC thermistor maxium value (ohms)
const float NTC_RPU = 10e3;   // Pull-up resistor voltage divisor (ohms) - should be the same as NTC
const float SHC_A = 1.14025E-03; // NTC linealization constant - grade0, offset
const float SHC_B = 2.32498E-04; // NTC linealization constant - grade1, x
const float SHC_C = 9.23464E-08; // NTC linealization constant - grade2, x^3

//DIRECCIONAMIENTO MUXs, CADA PLACA LLEVA UN MUX-->CADA DIRECCIÓN CORRESPONDE A UNA PLACA
#define mux_ADDRESS 0x70
#define mux_ADDRESS1 0x71
#define mux_ADDRESS2 0x72
#define mux_ADDRESS3 0x73

//DIRECCIÓN FIJA DE LOS DACs
#define DAC_ADDRESS_1 0x66

//DIRECCION DEL ADC
#define ADC_ADDRESS 0x68

//CANALES DEL MUX
#define MUX_CHANNEL_DAC1 0
#define MUX_CHANNEL_DAC2 1
#define MUX_CHANNEL_DAC3 2
#define MUX_CHANNEL_DAC4 3
#define MUX_CHANNEL_DAC5 4
#define MUX_CHANNEL_DAC6 5

Adafruit_MCP4725 dac1;
Adafruit_MCP342X adc;

float ntcRead1(int Pin) {
  float R_ntc, ln_Rntc, T_K, T_C, V_in, ADC_R;

  //ADC_R = 1023 - analogRead(Pin); //ntc colocada placas FRAN
  ADC_R = analogRead(Pin); //NTC PAMPI

  if (ADC_R > 0.0) {
    V_in = (V_ref * ADC_R / 1023.0); // ADC reading
    R_ntc = NTC_RPU * (V_ref - V_in) / V_in; // NTC current value calculation
  } else {
    V_in = 0;
    R_ntc = 0.01;
  }

  ln_Rntc = log(R_ntc);
  T_K = 1.0 / (SHC_A + (SHC_B * ln_Rntc) + (SHC_C * Pow3(ln_Rntc))); // Temp in K
  T_C = ToCelcius(T_K); // Temp in celsius

  return T_C;
}



float ajusteIN(float v, uint8_t salidaMUX){
  float lecturaADC = 0.0;
  int canal;
  float Vout= v * 4095 / Vref;
  if (salidaMUX == MUX_CHANNEL_DAC1){canal=0;}
  else if (salidaMUX == MUX_CHANNEL_DAC2){canal=1;}
  else if (salidaMUX == MUX_CHANNEL_DAC3){canal=2;}
  else if (salidaMUX == MUX_CHANNEL_DAC4){canal=3;}
  else if (salidaMUX == MUX_CHANNEL_DAC5){canal=4;}
  else if (salidaMUX == MUX_CHANNEL_DAC6){canal=5;}
  adc.startConversion(canal);
  while (!adc.isConversionComplete()){}//espera a terminar la conversión
  lecturaADC = adc.getResultVoltage();
  while (lecturaADC < Vout-0.02){ Vout+=0.01;} //mientras lea menos de lo que debería (margen 2%) aumento el valor
  while (lecturaADC > Vout+0.02){ Vout-=0.01;} //mientras lea más de lo que debería (margen 2%) reduzco el valor
  return Vout;

}

float calculateDerating(float temperature,uint8_t salidaMUX,float optionalVoltage = -1.0){
  float voltage = 0.0;
  float vAjustado = 0.0;
  if (optionalVoltage != -1.0) {
    voltage = optionalVoltage;
  } 
  else{ //en caso de que la salida de los dacs sea excatamente el valor indicado no es necesario multiplicar *2.5
    if (TipoFoco == 0){
      if (temperature <= tempValues[0]){
        voltage = Consigna[0] * 2.5; 
      }
      else if (temperature <= tempValues[1]){
        //rampa
        voltage = 2.5 * (Consigna[0] + (PendienteBMW * Consigna[0] * (-(tempValues[0] - temperature))));
      }
      else if (temperature <= tempValues[2]){
        voltage = Consigna[1] * 2.5;
      }
      else if (temperature <= tempValues[3]){
        voltage = Consigna[2] * 2.5;        
      }
      else if (temperature <= tempValues[4]){
        voltage = Consigna[3] * 2.5;
      }
      else if (temperature > tempValues[4] && temperature <= 150.0 ){
        voltage = Consigna[4] * 2.5;
      }
      else {
        voltage = 0.0;
      }
    }
    else{
      if (temperature <= TemperaturasVW[0]) {
        voltage = CorrientesVW[0];
      } 
      else if (temperature <= TemperaturasVW[1]) {
        voltage = CorrientesVW[0] - (PendienteVW * CorrientesVW[0] * (TemperaturasVW[0] - temperature));
      } 
      else if (temperature > TemperaturasVW[1] && temperature <= 150.0) {
        voltage = CorrientesVW[1];
      }
      else{
        voltage = 0.0;
      }
    }

  }
  vAjustado = ajusteIN(voltage,salidaMUX);
  return vAjustado;
}


void seleccionaMUX(int canal, float temperatura, int focoSEL, int correccion, float opt = -1.0) {
  uint8_t muxAddress;
  float Vout=0.0;
  if (canal == 0) muxAddress = mux_ADDRESS;
  else if (canal == 1) muxAddress = mux_ADDRESS1;
  else if (canal == 2) muxAddress = mux_ADDRESS2;
  else if (canal == 3) muxAddress = mux_ADDRESS3;

  Wire.beginTransmission(muxAddress);
  if (focoSEL == 1) {
    Wire.write(1 << MUX_CHANNEL_DAC1);
    Wire.endTransmission();
    Vout=calculateDerating(temperatura,MUX_CHANNEL_DAC1);
    dac1.setVoltage(Vout, false);

    Wire.beginTransmission(muxAddress);
    Wire.write(1 << MUX_CHANNEL_DAC2);
    Wire.endTransmission();
    Vout=calculateDerating(temperatura,MUX_CHANNEL_DAC2);
    dac1.setVoltage(Vout, false);
  }
  else if (focoSEL == 2) {
    Wire.write(1 << MUX_CHANNEL_DAC3);
    Wire.endTransmission();
    Vout=calculateDerating(temperatura,MUX_CHANNEL_DAC3);
    dac1.setVoltage(Vout, false);

    Wire.beginTransmission(muxAddress);
    Wire.write(1 << MUX_CHANNEL_DAC4);
    Wire.endTransmission();
    Vout=calculateDerating(temperatura,MUX_CHANNEL_DAC4);
    dac1.setVoltage(Vout, false);
  }
  else if (focoSEL == 3) {
    Wire.write(1 << MUX_CHANNEL_DAC5);
    Wire.endTransmission();
    Vout=calculateDerating(temperatura,MUX_CHANNEL_DAC5);
    dac1.setVoltage(Vout, false);

    Wire.beginTransmission(muxAddress);
    Wire.write(1 << MUX_CHANNEL_DAC6);
    Wire.endTransmission();
    Vout=calculateDerating(temperatura,MUX_CHANNEL_DAC6);
    dac1.setVoltage(Vout, false);
  }
  Serial.print("Temp NTC ");
  Serial.print(canal);
  Serial.print("_");
  Serial.print(focoSEL);
  Serial.print(": ");
  Serial.println(temperatura);
}



void setup() {
  Serial.begin(9600);

  adc.begin(ADC_ADDRESS);
  // Configuración de resolución y ganancia para el ADC
  adc.setResolution(12); // Resolución de 12 bits
  adc.setGain(1); // Ganancia de 1

  dac1.begin(DAC_ADDRESS_1);


  pinMode(eventoCamara, INPUT);
}

void loop() {
  while (digitalRead(eventoCamara) == HIGH) {
    float tem1 = ntcRead1(A0);
    float tem2 = ntcRead1(A1);
    float tem3 = ntcRead1(A2);
    float tem4 = ntcRead1(A3);
    float tem5 = ntcRead1(A4);
    float tem6 = ntcRead1(A5);


    seleccionaMUX(0, tem1, 1, AjusteOK);
    seleccionaMUX(0, tem2, 2, AjusteOK);
    seleccionaMUX(0, tem3, 3, AjusteOK);
    delay(100);
    seleccionaMUX(2, tem3, 1, AjusteOK);
    seleccionaMUX(2, tem4, 2, AjusteOK);
    seleccionaMUX(2, tem5, 3, AjusteOK);

    delay(1000);
  }
 while (digitalRead(eventoCamara) == LOW) {
    float tem1 = ntcRead1(A0);
    float tem2 = ntcRead1(A1);
    float tem3 = ntcRead1(A2);
    float tem4 = ntcRead1(A3);
    float tem5 = ntcRead1(A4);
    float tem6 = ntcRead1(A5);


    seleccionaMUX(0, tem1, 1, AjusteOK,0.0);
    seleccionaMUX(0, tem2, 2, AjusteOK,0.0);
    seleccionaMUX(0, tem3, 3, AjusteOK,0.0);
    delay(100);
    seleccionaMUX(2, tem3, 1, AjusteOK,0.0);
    seleccionaMUX(2, tem4, 2, AjusteOK,0.0);
    seleccionaMUX(2, tem5, 3, AjusteOK,0.0);

    delay(1000);
  }

  delay(500);
}
